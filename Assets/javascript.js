// Sidebar toggle (mobile)
const menuBtn = document.getElementById('menuBtn');
const sidebar = document.getElementById('sidebar');
const menuCloseBtns = document.querySelectorAll('.menuClose');

// Open / Toggle
menuBtn.addEventListener('click', () => {
  sidebar.classList.toggle('open');
});

// Close (for all close buttons)
menuCloseBtns.forEach(btn => {
  btn.addEventListener('click', () => {
    sidebar.classList.remove('open');
  });
});



    // Theme toggle with localStorage
    const themeBtn = document.getElementById('themeBtn');
    const themeLabel = document.getElementById('themeLabel');

    function setTheme(mode){
      document.documentElement.setAttribute('data-theme', mode);
      localStorage.setItem('theme', mode);
      themeLabel.textContent = (mode === 'dark') ? '‡¶≤‡¶æ‡¶á‡¶ü' : ' ‡¶°‡¶æ‡¶∞‡ßç‡¶ï ';
    }
    const saved = localStorage.getItem('theme');
    setTheme(saved || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'));

    themeBtn.addEventListener('click', ()=>{
      const current = document.documentElement.getAttribute('data-theme');
      setTheme(current === 'light' ? 'dark' : 'light');
    });


    // ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶ö‡¶≤‡¶æ   ###################################################

let runningFont = document.getElementById("runFont")
runningFont.innerText = " ‡¶∞‡¶æ‡¶¨‡ßç‡¶¨‡¶ø ‡¶ú‡¶ø‡¶¶‡¶®‡¶ø ‡¶á‡¶≤‡¶Æ‡¶æ üíé ‡¶∞‡¶æ‡¶¨‡ßç‡¶¨‡¶ø ‡¶ú‡¶ø‡¶¶‡¶®‡¶ø ‡¶á‡¶≤‡¶Æ‡¶æ üíé ‡¶∞‡¶æ‡¶¨‡ßç‡¶¨‡¶ø ‡¶ú‡¶ø‡¶¶‡¶®‡¶ø ‡¶á‡¶≤‡¶Æ‡¶æ üíé ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶á ‡¶Ø‡¶•‡ßá‡¶∑‡ßç‡¶ü : ‚Äò‡¶π‡¶æ‡¶∏‡¶¨‡ßÅ‡¶®‡¶æ‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡ßÅ ‡¶ì‡ßü‡¶æ ‡¶®‡¶ø‡¶Æ‡¶æ‡¶≤ ‡¶ì‡ßü‡¶æ‡¶ï‡¶ø‡¶≤, ‡¶®‡¶ø‡¶Æ‡¶æ‡¶≤ ‡¶Æ‡¶æ‡¶ì‡¶≤‡¶æ ‡¶ì‡ßü‡¶æ ‡¶®‡¶ø‡¶Æ‡¶æ‡¶® ‡¶®‡¶æ‡¶∏‡¶ø‡¶∞‡•§‚Äô üíé ";

// Accessible Accordion ###################################################
const headers = document.querySelectorAll('.accordion-header');

headers.forEach((btn) => {
  btn.addEventListener('click', () => togglePanel(btn));
  btn.addEventListener('keydown', (e) => {
    if(e.key === 'Enter' || e.key === ' '){ 
      e.preventDefault(); 
      togglePanel(btn); 
    }
  });
});

function togglePanel(btn){
  const expanded = btn.getAttribute('aria-expanded') === 'true';
  const panelId = btn.getAttribute('aria-controls');
  const panel = document.getElementById(panelId);

  // ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶á‡¶ü‡ßá‡¶Æ‡¶ü‡¶ø ‡¶ü‡¶ó‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
  btn.setAttribute('aria-expanded', String(!expanded));
  panel.classList.toggle('open');

      // Smooth scroll into view when opened on mobile
      if(!expanded){
        setTimeout(()=>{ panel.scrollIntoView({behavior:'smooth', block:'nearest'}); }, 200);
      }
    }

// ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü  ###################################################

document.addEventListener("DOMContentLoaded", function() {
  const items = document.querySelectorAll(".dua-card");

  items.forEach(item => {
    const refDiv = item.querySelector(".ref");

    if (refDiv) {
      // ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶ï‡¶® ‡¶§‡ßà‡¶∞‡¶ø
      const shareIcon = document.createElement("i");
      shareIcon.className = "fa fa-share-alt";
      shareIcon.style.marginLeft = "8px";
      shareIcon.style.cursor = "pointer";
      shareIcon.setAttribute("title", "‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®");

      // ‡¶∞‡ßá‡¶´ div ‡¶è ‡¶¨‡¶∏‡¶æ‡¶®‡ßã
      refDiv.appendChild(shareIcon);

      // ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü
      shareIcon.addEventListener("click", async function() {
        // accordion-item ‡¶è‡¶∞ ‡¶≤‡ßá‡¶ñ‡¶æ‡¶ó‡ßÅ‡¶≤‡¶ø (HTML ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá, ‡¶≤‡¶æ‡¶á‡¶® ‡¶Æ‡ßá‡¶á‡¶®‡¶ü‡ßá‡¶® ‡¶ï‡¶∞‡ßá)
        const textContent = item.innerText.trim();

        // ‡¶∏‡¶æ‡¶á‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∂‡ßá‡¶∑‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
        const shareText = `${textContent}\n\n‡¶Ü‡¶∞‡ßã ‡¶è‡¶Æ‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶ì ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶™‡ßá‡¶§‡ßá ‡¶≠‡¶ø‡¶ú‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:\n${window.location.href}`;

        if (navigator.share) {
          try {
            await navigator.share({
              title: document.title,
              text: shareText
            });
          } catch (err) {
            console.log("‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤:", err);
          }
        } else {
          // fallback: ‡¶ï‡ßç‡¶≤‡¶ø‡¶™‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡ßü‡¶æ
          navigator.clipboard.writeText(shareText);
          alert("‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶®‡ßá‡¶á, ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶ï‡ßç‡¶≤‡¶ø‡¶™‡¶¨‡ßã‡¶∞‡ßç‡¶°‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§");
        }
      });
    }
  });
});

   // idenhi ivdi balvisi likki 10 arba   ###################################################

var clickCount = 0;
var clickDiv = document.getElementById("clickDiv");
var hiddenDiv = document.getElementById("hdn");

if (!clickDiv || !hiddenDiv) {
  console.error("Could not find clickDiv or hiddenDiv");
} else {
  clickDiv.addEventListener("click", function() {
    clickCount++;
    if (clickCount === 5) {
      hiddenDiv.style.display = "block";
    }
  });
}

          //app shortcut          ###################################################
// Service Worker ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞
if ("serviceWorker" in navigator) {
  navigator.serviceWorker.register("../sw.js")
    .then(() => console.log("SW registered"))
    .catch(err => console.log("SW fail", err));
}


let deferredPrompt;
const installBtn = document.getElementById('installBtn');

// Install prompt event ‡¶ß‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
window.addEventListener('beforeinstallprompt', (e) => {
  e.preventDefault();
  deferredPrompt = e;

  // ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
  installBtn.style.display = 'inline-block';
});

// ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶≤‡ßá prompt ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
installBtn.addEventListener('click', () => {
  installBtn.style.display = 'none';
  deferredPrompt.prompt();

  deferredPrompt.userChoice.then((choiceResult) => {
    if (choiceResult.outcome === 'accepted') {
      console.log('‚úÖ User accepted install');
    } else {
      console.log('‚ùå User dismissed install');
    }
    deferredPrompt = null;
  });
});




// JavaScript code to create a dynamic Qibla compass inside #compasQ  ###################################################

(() => {
  const mountId = "compasQ";
  const root = document.getElementById(mountId);
  if (!root) { console.error("#" + mountId + " not found"); return; }

  // ----- Style -----
  const style = document.createElement("style");
  style.textContent = `
    .cmp-wrap{position:relative; width:214px; height:214px; margin:16px auto; font-family:system-ui,Segoe UI,Roboto,Arial;}
    .cmp-dial{position:absolute; inset:0; border-radius:50%; border:8px solid #dfdfdfff; box-shadow:0 4px 12px rgba(255, 162, 22, 1) inset;}
    .cmp-ring{position:absolute; inset:16px; border-radius:50%; border:2px dashed #0135c5ff;}
    .cmp-card{position:absolute; left:86%; font-weight:bold; font-size:14px;}
    .cmp-card.n{top:10px; transform:translateX(-280%);}
    .cmp-card.s{bottom:10px; transform:translateX(-225%);}
    .cmp-card.e{right:10px; top:49%; transform:translateY(-45%);}
    .cmp-card.w{left:-4px; top:42%; transform:translateY(-50%); rotate:270deg;}
    .cmp-ticks{position:absolute; inset:-1px; border-radius:50%;}
    .cmp-ticks div{position:absolute; left:50%; top:0; width:2px; height:12px; background:#94a3b8; transform-origin:50% 108px;}
    .cmp-ticks div.major{height:18px; background:#475569;}
    .cmp-needle{position:absolute; left:50%; top:50%; width:0; height:0; transform:translate(-50%, -50%);}
    .cmp-needle .north{position:absolute; left:-8px; top:-100px; width:16px; height:100px; background:linear-gradient(#56ff34, #0c9b2b); clip-path:polygon(50% 0,100% 100%,0 100%);}
    .cmp-cap{position:absolute; left:50%; top:50%; width:18px; height:18px; border-radius:50%; transform:translate(-50%, -50%); box-shadow:0 0 0 2px #111 inset;}
    .cmp-readout{margin-top:280px; text-align:center; font-size:14px; display:none;}
    .cmp-badge{display:inline-block; background:#f1f5f9; padding:.35rem .6rem; border-radius:.75rem; font-variant-numeric:tabular-nums;}
    .cmp-btn{display:inline-block; margin-top:8px; padding:.5rem .9rem; border-radius:.75rem; background:#111; color:#fff; cursor:pointer;}
    .cmp-note{font-size:12px; color:#6b7280; margin-top:6px;}
  `;
  document.head.appendChild(style);

  // ----- Structure -----
  const wrap = document.createElement("div");
  wrap.className = "cmp-wrap";
  wrap.innerHTML = `
    <div class="cmp-dial">
      <div class="cmp-ring"></div>
      <div class="cmp-card n">‡¶â‡¶§‡ßç‡¶§‡¶∞</div>
      <div class="cmp-card e">‡¶™‡ßÇ‡¶∞‡ßç‡¶¨</div>
      <div class="cmp-card s">‡¶¶‡¶ï‡ßç‡¶∑‡¶ø‡¶®</div>
      <div class="cmp-card w"> <img src="https://cdn-icons-png.flaticon.com/512/10203/10203988.png" alt="" style="width: 30px;"></div></div>
      <div class="cmp-ticks"></div>
    </div>
    <div class="cmp-needle">
      <div class="north"></div>
    </div>
    <div class="cmp-cap"></div>
    <div class="cmp-readout">
      <div><span class="cmp-badge" id="cmpDeg">--.-¬∞</span> <span class="cmp-badge" id="cmpDir">---</span></div>
      <div class="cmp-note" id="cmpNote">Enable motion/compass permission to start.</div>
      <div><button class="cmp-btn" id="cmpBtn" type="button" style="display:none">Enable Compass</button></div>
    </div>
  `;
  root.appendChild(wrap);

  // ----- Ticks -----
  const ticks = wrap.querySelector(".cmp-ticks");
  for (let i = 0; i < 360; i += 10) {
    const t = document.createElement("div");
    t.style.transform = `rotate(${i}deg) translateX(-1px)`;
    if (i % 90 === 0) t.classList.add("major");
    ticks.appendChild(t);
  }

  const dial   = wrap.querySelector(".cmp-dial");
  const ring   = wrap.querySelector(".cmp-ring");
  const ticksEl= wrap.querySelector(".cmp-ticks");
  const degEl  = wrap.querySelector("#cmpDeg");
  const dirEl  = wrap.querySelector("#cmpDir");
  const noteEl = wrap.querySelector("#cmpNote");
  const btnEl  = wrap.querySelector("#cmpBtn");

  const dirs = ["N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW"];
  const toDir = d => dirs[Math.round(d/22.5) % 16];
  const norm = d => (d % 360 + 360) % 360;

  let smooth = null;
  const smoothen = (val) => {
    const alpha = 0.15;
    if (smooth === null) smooth = val;
    const diff = ((val - smooth + 540) % 360) - 180;
    smooth = norm(smooth + diff * alpha);
    return smooth;
  };

  const onReading = (deg) => {
    const sm = smoothen(norm(deg));
    dial.style.transform   = `rotate(${-sm}deg)`;
    ring.style.transform   = `rotate(${-sm}deg)`;
    ticksEl.style.transform= `rotate(${-sm}deg)`;
    degEl.textContent = sm.toFixed(1) + "¬∞";
    dirEl.textContent = toDir(sm);
  };

  // Heading helpers
  const screenAngle = () => {
    const a = (screen.orientation && typeof screen.orientation.angle === "number")
      ? screen.orientation.angle
      : (window.orientation || 0);
    return Number(a) || 0;
  };
  const computeHeadingFromAlpha = (alpha, absoluteFlag) => {
    if (alpha == null) return null;
    let heading = 360 - alpha;
    heading = norm(heading - screenAngle());
    return absoluteFlag === false ? null : norm(heading);
  };

  // Permission flow
  const needsPermission =
    typeof DeviceOrientationEvent !== "undefined" &&
    typeof DeviceOrientationEvent.requestPermission === "function";
  const secureContext = location.protocol === "https:" || location.hostname === "localhost";

  const start = async () => {
    if (!secureContext) {
      noteEl.textContent = "Compass needs HTTPS or localhost.";
      btnEl.style.display = "none";
      return;
    }
    if (needsPermission) {
      try {
        const res = await DeviceOrientationEvent.requestPermission();
        if (res !== "granted") {
          noteEl.textContent = "Permission denied. Tap to try again.";
          btnEl.style.display = "";
          return;
        }
      } catch {
        noteEl.textContent = "Permission request failed. Tap to retry.";
        btnEl.style.display = "";
        return;
      }
    }
    subscribe();
  };

  const handleDO = (e) => {
    let heading = (typeof e.webkitCompassHeading === "number") ? e.webkitCompassHeading : null;
    if (heading == null) heading = (typeof e.compassHeading === "number") ? e.compassHeading : null;
    if (heading == null) heading = computeHeadingFromAlpha(e.alpha, e.absolute);

    if (heading != null && isFinite(heading)) {
      noteEl.textContent = "Pointing to magnetic North.";
      onReading(heading);
    } else {
      noteEl.textContent = "";
    }
  };

  const subscribe = () => {
    window.addEventListener("deviceorientationabsolute", handleDO, true);
    window.addEventListener("deviceorientation", handleDO, true);
  };

  if (needsPermission) {
    btnEl.style.display = "";
    btnEl.addEventListener("click", start, { passive:true });
  } else {
    start();
  }
})();


// Ramadan ###########################################################################


// Ramadan Widget JavaScript Code
async function getRamadanTimings(latitude, longitude, year) {
    try {
        // Ramadan start date calculation (approximate)
        const ramadanStart = await fetch(`https://api.aladhan.com/v1/gToH?date=01-09-${year}`);
        const ramadanData = await ramadanStart.json();
        
        if (ramadanData.code === 200) {
            const hijriMonth = ramadanData.data.hijri.month.number;
            const hijriDay = ramadanData.data.hijri.day;
            
            // If it's not Ramadan yet, calculate the start date
            if (hijriMonth !== 9) {
                const ramadanStartDate = new Date(ramadanData.data.gregorian.date);
                return {
                    ramadanStart: ramadanStartDate,
                    ramadanEnd: new Date(ramadanStartDate.getTime() + 29 * 24 * 60 * 60 * 1000),
                    daysUntilRamadan: Math.ceil((ramadanStartDate - new Date()) / (1000 * 60 * 60 * 24))
                };
            } else {
                // If Ramadan has already started
                const currentDay = parseInt(hijriDay);
                return {
                    ramadanStart: new Date(),
                    ramadanEnd: new Date(new Date().getTime() + (30 - currentDay) * 24 * 60 * 60 * 1000),
                    currentRoza: currentDay,
                    daysUntilRamadan: 0
                };
            }
        }
    } catch (error) {
        console.error('Error fetching Ramadan data:', error);
        // Fallback calculation if API fails
        const ramadanStartDate = new Date(year, 2, 23); // Approximate date
        return {
            ramadanStart: ramadanStartDate,
            ramadanEnd: new Date(ramadanStartDate.getTime() + 29 * 24 * 60 * 60 * 1000),
            daysUntilRamadan: Math.ceil((ramadanStartDate - new Date()) / (1000 * 60 * 60 * 24))
        };
    }
}

async function getPrayerTimes(latitude, longitude, date) {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    
    try {
        const response = await fetch(`https://api.aladhan.com/v1/calendar/${year}/${month}?latitude=${latitude}&longitude=${longitude}&method=2`);
        
        if (!response.ok) {
            throw new Error(`API responded with status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.code === 200 && data.data && data.data.length > 0) {
            const dayData = data.data[day - 1];
            
            if (!dayData || !dayData.timings) {
                throw new Error('Invalid data structure from API');
            }
            
            return {
                sehri: dayData.timings.Fajr,
                iftar: dayData.timings.Maghrib,
                date: dayData.date.readable
            };
        } else {
            throw new Error('Invalid response from prayer time API');
        }
    } catch (error) {
        console.error('Error fetching prayer times:', error);
        // Fallback times
        return {
            sehri: '04:45',
            iftar: '18:30',
            date: date.toLocaleDateString('bn-BD')
        };
    }
}

function updateRamadanCountdown(ramadanData) {
    const now = new Date();
    const timeUntilRamadan = ramadanData.ramadanStart - now;
    
    if (timeUntilRamadan <= 0) {
        // Ramadan has started
        return {
            days: 0,
            hours: 0,
            minutes: 0,
            seconds: 0,
            status: 'started',
            currentRoza: ramadanData.currentRoza || 1
        };
    } else {
        // Countdown to Ramadan
        const days = Math.floor(timeUntilRamadan / (1000 * 60 * 60 * 24));
        const hours = Math.floor((timeUntilRamadan % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((timeUntilRamadan % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((timeUntilRamadan % (1000 * 60)) / 1000);
        
        return {
            days,
            hours,
            minutes,
            seconds,
            status: 'counting',
            currentRoza: 0
        };
    }
}

function formatTime(timeStr) {
    if (!timeStr) return '--:--';
    
    try {
        const [time, period] = timeStr.split(' ');
        if (!time) return '--:--';
        
        const [hours, minutes] = time.split(':');
        if (!hours || !minutes) return '--:--';
        
        return `${hours}:${minutes}`;
    } catch (error) {
        console.error('Error formatting time:', error);
        return '--:--';
    }
}

function generateCalendar(ramadanStart, currentRoza) {
    const calendar = [];
    const startDate = new Date(ramadanStart);
    
    for (let i = 0; i < 30; i++) {
        const currentDate = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);
        const dayOfWeek = currentDate.toLocaleDateString('bn-BD', { weekday: 'short' });
        const dayOfMonth = currentDate.getDate();
        const month = currentDate.toLocaleDateString('bn-BD', { month: 'short' });
        
        calendar.push({
            roza: i + 1,
            date: `${dayOfMonth} ${month}`,
            day: dayOfWeek,
            isToday: currentRoza === i + 1,
            isPast: currentRoza > i + 1
        });
    }
    
    return calendar;
}

async function updateRamadanUI(ramadanData, prayerTimes, location) {
    const countdown = updateRamadanCountdown(ramadanData);
    const calendar = generateCalendar(ramadanData.ramadanStart, countdown.currentRoza);
    
    const ramadanDiv = document.querySelector('.Ramadan');
    if (!ramadanDiv) {
        console.error('Ramadan div not found in DOM');
        return;
    }
    
    // Format Ramadan start and end dates
    const startDate = ramadanData.ramadanStart.toLocaleDateString('bn-BD', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
    
    const endDate = ramadanData.ramadanEnd.toLocaleDateString('bn-BD', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
    
    // Create UI HTML
    ramadanDiv.innerHTML = `
        <div style="background: var(--datebg); backdrop-filter: blur(10px); border-radius: 15px; padding: 20px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2); color: var(--text); text-align: center; max-width: 600px; margin: 0 auto;">
            <h2 style="margin-top: 0; margin-bottom: 15px; font-weight: 600; text-shadow: 1px 1px 3px rgba(0,0,0,0.1); color: var(--text);">‡¶∞‡¶Æ‡¶ú‡¶æ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞</h2>
            <p style="margin-bottom: 5px; opacity: 0.9;">‡¶∏‡ßç‡¶•‡¶æ‡¶®: ${location || '‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...'}</p>
            
            ${countdown.status === 'counting' ? `
                <div style="background: var(--card); padding: 15px; border-radius: 10px; margin-bottom: 20px;">
                    <h3 style="margin-top: 0; color: var(--text);;">‡¶∞‡¶Æ‡¶ú‡¶æ‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶§‡ßá ‡¶¨‡¶æ‡¶ï‡¶ø</h3>
                    <div style="display: flex; justify-content: center; gap: 15px; margin-bottom: 10px;">
                        <div style="text-align: center;">
                            <div style="font-size: 2em; font-weight: 700;">${countdown.days}</div>
                            <div>‡¶¶‡¶ø‡¶®</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 2em; font-weight: 700;">${countdown.hours}</div>
                            <div>‡¶ò‡¶£‡ßç‡¶ü‡¶æ</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-size: 2em; font-weight: 700;">${countdown.minutes}</div>
                            <div>‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü</div>
                        </div>
                    </div>
                    <p>‡¶∞‡¶Æ‡¶ú‡¶æ‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ: ${startDate}</p>
                </div>
            ` : `
                <div style="background: var(--card);padding: 15px; border-radius: 10px; margin-bottom: 20px;">
                    <h3 style="margin-top: 0; color: var(--text);;">‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶∞‡ßã‡¶ú‡¶æ: ${countdown.currentRoza}</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
                        <div style="text-align: center;">
                            <div style="font-weight: 600; margin-bottom: 5px;">‡¶∏‡ßá‡¶π‡¶∞‡¶ø</div>
                            <div style="font-size: 1.5em; font-weight: 700;">${formatTime(prayerTimes.sehri)}</div>
                        </div>
                        <div style="text-align: center;">
                            <div style="font-weight: 600; margin-bottom: 5px;">‡¶á‡¶´‡¶§‡¶æ‡¶∞</div>
                            <div style="font-size: 1.5em; font-weight: 700;">${formatTime(prayerTimes.iftar)}</div>
                        </div>
                    </div>
                    <p style="margin-top: 10px; margin-bottom: 0;">‡¶Ü‡¶ú: ${prayerTimes.date}</p>
                </div>
            `}
            
            <div style="margin-bottom: 20px;">
                <h3 style="color: var(--text);;">‡¶∞‡¶Æ‡¶ú‡¶æ‡¶® ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ</h3>
                <p>‡¶∞‡¶Æ‡¶ú‡¶æ‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ: ${startDate} | ‡¶∞‡¶Æ‡¶ú‡¶æ‡¶® ‡¶∂‡ßá‡¶∑: ${endDate}</p>
            </div>
            
            <div style="margin-bottom: 20px;">
                <h3 style="color: var(--text);;">‡¶∞‡¶Æ‡¶ú‡¶æ‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶∞</h3>
                <div style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 8px; max-height: 300px; overflow-y: auto;">
                    ${calendar.map(day => `
                        <div style="padding: 10px; border-radius: 8px; text-align: center; 
                            ${day.isToday ? 'background: var(--date);' : 
                              day.isPast ? 'background: rgba(130, 255, 228, 0.2);' : 'background: var(--card);'}">
                            <div style="font-size: 0.9em; font-weight: ${day.isToday ? '700' : '500'};">${day.roza}</div>
                            <div style="font-size: 0.8em;">${day.date}</div>
                            <div style="font-size: 0.7em;">${day.day}</div>
                        </div>
                    `).join('')}
                </div>
            </div>
            
            <div>
                <button id="ramadanLocationToggle" style="background: var(--card); border: none; padding: 8px 15px; border-radius: 5px; color: var(--text);; cursor: pointer;">
                    ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®
                </button>
            </div>
            
            <div id="ramadanLocationSelector" style="display: none; margin-top: 15px; background: var(--card); padding: 15px; border-radius: 10px;">
                <h3 style="margin-top: 0; color: var(--text);;">‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®</h3>
                <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                    <button id="ramadanAutoDetectBtn" style="flex: 1; background: #4CAF50; border: none; padding: 8px; border-radius: 5px; color: white; cursor: pointer;">
                        ‡¶Ö‡¶ü‡ßã ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡ßç‡¶ü
                    </button>
                    <button id="ramadanManualSelectBtn" style="flex: 1; background: #2196F3; border: none; padding: 8px; border-radius: 5px; color: white; cursor: pointer;">
                        ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü
                    </button>
                </div>
                
                <div id="ramadanManualInput" style="display: none;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 10px;">
                        <input type="text" id="ramadanCityInput" placeholder="‡¶∂‡¶π‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ" style="padding: 8px; border-radius: 5px; border: 1px solid #ccc;">
                        <input type="text" id="ramadanCountryInput" placeholder="‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ" style="padding: 8px; border-radius: 5px; border: 1px solid #ccc;">
                    </div>
                    <button id="ramadanSearchLocationBtn" style="background: #FF9800; border: none; padding: 8px 15px; border-radius: 5px; color: white; cursor: pointer; width: 100%;">
                        ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®
                    </button>
                </div>
            </div>
        </div>
    `;
    
    // Add event listeners
    const toggleBtn = document.getElementById('ramadanLocationToggle');
    if (toggleBtn) {
        toggleBtn.addEventListener('click', function() {
            const selector = document.getElementById('ramadanLocationSelector');
            if (selector) {
                selector.style.display = selector.style.display === 'none' ? 'block' : 'none';
            }
        });
    }
    
    const autoDetectBtn = document.getElementById('ramadanAutoDetectBtn');
    if (autoDetectBtn) {
        autoDetectBtn.addEventListener('click', function() {
            localStorage.removeItem('ramadanLocation');
            initializeRamadanWidget();
        });
    }
    
    const manualSelectBtn = document.getElementById('ramadanManualSelectBtn');
    if (manualSelectBtn) {
        manualSelectBtn.addEventListener('click', function() {
            const manualInput = document.getElementById('ramadanManualInput');
            if (manualInput) {
                manualInput.style.display = 'block';
            }
        });
    }
    
    const searchBtn = document.getElementById('ramadanSearchLocationBtn');
    if (searchBtn) {
        searchBtn.addEventListener('click', async function() {
            const cityInput = document.getElementById('ramadanCityInput');
            const countryInput = document.getElementById('ramadanCountryInput');
            
            if (cityInput && countryInput) {
                const city = cityInput.value;
                const country = countryInput.value;
                
                if (city && country) {
                    try {
                        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(city + ', ' + country)}&accept-language=bn`);
                        const data = await response.json();
                        
                        if (data.length > 0) {
                            const lat = parseFloat(data[0].lat);
                            const lng = parseFloat(data[0].lon);
                            const locationName = data[0].display_name;
                            
                            localStorage.setItem('ramadanLocation', JSON.stringify({
                                latitude: lat,
                                longitude: lng,
                                name: locationName
                            }));
                            
                            initializeRamadanWidget();
                        } else {
                            alert('‡¶∏‡ßç‡¶•‡¶æ‡¶®‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§');
                        }
                    } catch (error) {
                        console.error('Error fetching location:', error);
                        alert('‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ËøáÁ®ã‰∏≠ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§');
                    }
                } else {
                    alert('‡¶∂‡¶π‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®‡•§');
                }
            }
        });
    }
}

async function getLocationName(latitude, longitude) {
    try {
        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&accept-language=bn`);
        const data = await response.json();
        return data.display_name || '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®';
    } catch (error) {
        console.error('Error getting location name:', error);
        return '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®';
    }
}

async function getUserLocation() {
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject('Geolocation is not supported by your browser');
        } else {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    resolve({
                        latitude: position.coords.latitude,
                        longitude: position.coords.longitude
                    });
                },
                (error) => {
                    // Default to Dhaka, Bangladesh if location access is denied
                    console.error('Error getting location, using default (Dhaka)');
                    resolve({ latitude: 23.8103, longitude: 90.4125 });
                },
                { timeout: 10000 }
            );
        }
    });
}

async function initializeRamadanWidget() {
    try {
        let latitude, longitude, locationName;
        const currentYear = new Date().getFullYear();
        
        // Get saved location or use current location
        const savedLocation = localStorage.getItem('ramadanLocation');
        
        if (savedLocation) {
            try {
                const locationData = JSON.parse(savedLocation);
                latitude = locationData.latitude;
                longitude = locationData.longitude;
                locationName = locationData.name;
            } catch (e) {
                console.error('Error parsing saved location:', e);
                localStorage.removeItem('ramadanLocation');
                const coords = await getUserLocation();
                latitude = coords.latitude;
                longitude = coords.longitude;
                locationName = await getLocationName(latitude, longitude);
            }
        } else {
            // Auto detect location
            const coords = await getUserLocation();
            latitude = coords.latitude;
            longitude = coords.longitude;
            locationName = await getLocationName(latitude, longitude);
        }
        
        // Get Ramadan data
        const ramadanData = await getRamadanTimings(latitude, longitude, currentYear);
        
        // Get today's prayer times
        const today = new Date();
        const prayerTimes = await getPrayerTimes(latitude, longitude, today);
        
        // Update UI
        updateRamadanUI(ramadanData, prayerTimes, locationName);
        
        // Update countdown every minute if Ramadan hasn't started
        if (ramadanData.daysUntilRamadan > 0) {
            setInterval(async () => {
                const updatedRamadanData = await getRamadanTimings(latitude, longitude, currentYear);
                const updatedPrayerTimes = await getPrayerTimes(latitude, longitude, new Date());
                updateRamadanUI(updatedRamadanData, updatedPrayerTimes, locationName);
            }, 60000);
        }
        
    } catch (error) {
        console.error('Error initializing Ramadan widget:', error);
        const ramadanDiv = document.querySelector('.Ramadan');
        if (ramadanDiv) {
            ramadanDiv.innerHTML = `
                <div style="text-align: center; padding: 20px; color: #d32f2f; background: rgba(211, 47, 47, 0.1); border-radius: 10px;">
                    ‡¶∞‡¶Æ‡¶ú‡¶æ‡¶® ‡¶â‡¶á‡¶ú‡ßá‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                </div>
            `;
        }
    }
}

// Initialize the widget when the page loads
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeRamadanWidget);
} else {
    initializeRamadanWidget();
}





// pray time ###########################################################################

// Prayer Time API ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function getPrayerTimes(latitude, longitude, method = 2) {
    const date = new Date();
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const today = date.getDate();
    
    // API ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ
    try {
        const response = await fetch(`https://api.aladhan.com/v1/calendar/${year}/${month}?latitude=${latitude}&longitude=${longitude}&method=${method}`);
        
        if (!response.ok) {
            throw new Error(`API responded with status: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.code === 200 && data.data && data.data.length > 0) {
            const todayData = data.data[today - 1];
            
            if (!todayData || !todayData.timings) {
                throw new Error('Invalid data structure from API');
            }
            
            return {
                fajr: todayData.timings.Fajr || '05:00 (AM)',
                dhuhr: todayData.timings.Dhuhr || '12:00 (PM)',
                asr: todayData.timings.Asr || '15:30 (PM)',
                maghrib: todayData.timings.Maghrib || '18:00 (PM)',
                isha: todayData.timings.Isha || '19:30 (PM)',
                sunrise: todayData.timings.Sunrise || '06:00 (AM)',
                sunset: todayData.timings.Sunset || '18:00 (PM)',
                date: todayData.date?.readable || new Date().toLocaleDateString('bn-BD')
            };
        } else {
            throw new Error('Invalid response from prayer time API');
        }
    } catch (error) {
        console.error('Error fetching prayer times:', error);
        
        // Fallback prayer times in case of API failure
        return {
            fajr: '05:00 (AM)',
            dhuhr: '12:00 (PM)',
            asr: '15:30 (PM)',
            maghrib: '18:00 (PM)',
            isha: '19:30 (PM)',
            sunrise: '06:00 (AM)',
            sunset: '18:00 (PM)',
            date: new Date().toLocaleDateString('bn-BD')
        };
    }
}

// ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (24h ‡¶•‡ßá‡¶ï‡ßá 12h) - ‡¶Ü‡¶∞‡¶ì robust version
function formatTime(timeStr) {
    if (!timeStr || typeof timeStr !== 'string') {
        return '--:-- --';
    }
    
    try {
        // ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
        if (timeStr.includes('(') && timeStr.includes(')')) {
            return timeStr;
        }
        
        const [time, period] = timeStr.split(' ');
        if (!time) return '--:-- --';
        
        const [hours, minutes] = time.split(':');
        if (!hours || !minutes) return '--:-- --';
        
        return `${hours}:${minutes} ${period || ''}`.trim();
    } catch (error) {
        console.error('Error formatting time:', error, timeStr);
        return '--:-- --';
    }
}

// ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶•‡ßá‡¶ï‡ßá ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ - ‡¶Ü‡¶∞‡¶ì robust version
function timeToMinutes(timeStr) {
    if (!timeStr) return 0;
    
    try {
        // ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá
        let timePart = timeStr;
        if (timeStr.includes('(') && timeStr.includes(')')) {
            timePart = timeStr.split('(')[0].trim();
        }
        
        const [time, period] = timePart.split(' ');
        if (!time) return 0;
        
        let [hours, minutes] = time.split(':').map(Number);
        if (isNaN(hours) || isNaN(minutes)) return 0;
        
        // 12-hour to 24-hour conversion
        if (period === 'PM' && hours !== 12) hours += 12;
        if (period === 'AM' && hours === 12) hours = 0;
        
        return hours * 60 + minutes;
    } catch (error) {
        console.error('Error converting time to minutes:', error, timeStr);
        return 0;
    }
}

// ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶°‡¶æ‡¶â‡¶® ‡¶ó‡¶£‡¶®‡¶æ
function getNextPrayerAndCountdown(prayerTimes) {
    const now = new Date();
    const currentTime = now.getHours() * 60 + now.getMinutes();
    const currentDay = now.getDay(); // 0 = Sunday, 5 = Friday
    
    const prayers = [
        { name: '‡¶´‡¶ú‡¶∞', time: prayerTimes.fajr, key: 'fajr' },
        { name: '‡¶Ø‡ßã‡¶π‡¶∞', time: prayerTimes.dhuhr, key: 'dhuhr' },
        { name: '‡¶Ü‡¶∏‡¶∞', time: prayerTimes.asr, key: 'asr' },
        { name: '‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨', time: prayerTimes.maghrib, key: 'maghrib' },
        { name: '‡¶á‡¶∂‡¶æ', time: prayerTimes.isha, key: 'isha' }
    ];
    
    // ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞
    const prayerMinutes = prayers.map(prayer => {
        return {
            name: prayer.name,
            key: prayer.key,
            minutes: timeToMinutes(prayer.time),
            formattedTime: formatTime(prayer.time)
        };
    });
    
    // ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    let currentPrayer = null;
    for (let i = 0; i < prayerMinutes.length; i++) {
        const current = prayerMinutes[i];
        const next = prayerMinutes[i + 1];
        
        if (next) {
            if (currentTime >= current.minutes && currentTime < next.minutes) {
                currentPrayer = current;
                break;
            }
        } else {
            // ‡¶∂‡ßá‡¶∑ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú (‡¶á‡¶∂‡¶æ) ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡¶∞‡¶¶‡¶ø‡¶® ‡¶´‡¶ú‡¶∞ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§
            if (currentTime >= current.minutes) {
                currentPrayer = current;
            }
        }
    }
    
    // ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    let nextPrayer = null;
    for (const prayer of prayerMinutes) {
        if (prayer.minutes > currentTime) {
            nextPrayer = prayer;
            break;
        }
    }
    
    // ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶¨ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡¶∞‡ßá‡¶∞ ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶´‡¶ú‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
    if (!nextPrayer) {
        nextPrayer = {
            name: '‡¶´‡¶ú‡¶∞',
            key: 'fajr',
            minutes: prayerMinutes[0].minutes + 24 * 60, // ‡¶™‡¶∞‡ßá‡¶∞ ‡¶¶‡¶ø‡¶®
            formattedTime: prayerMinutes[0].formattedTime
        };
    }
    
    // ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶°‡¶æ‡¶â‡¶® ‡¶ó‡¶£‡¶®‡¶æ
    const timeRemaining = nextPrayer.minutes - currentTime;
    const hoursRemaining = Math.floor(timeRemaining / 60);
    const minutesRemaining = timeRemaining % 60;
    
    // ‡¶ú‡ßÅ‡¶Æ‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    const today = new Date();
    const daysUntilFriday = (5 - today.getDay() + 7) % 7;
    const nextFriday = new Date(today);
    nextFriday.setDate(today.getDate() + daysUntilFriday);
    const jummahDate = nextFriday.toLocaleDateString('bn-BD', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    });
    
    return {
        currentPrayer: currentPrayer ? currentPrayer.name : null,
        currentPrayerTime: currentPrayer ? prayerTimes[currentPrayer.key] : null,
        nextPrayer: nextPrayer.name,
        nextPrayerTime: nextPrayer.formattedTime,
        countdown: `${hoursRemaining} ‡¶ò‡¶£‡ßç‡¶ü‡¶æ ${minutesRemaining} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü`,
        isJummah: currentDay === 5, // Friday
        jummahDate: jummahDate,
        jummahTime: formatTime(prayerTimes.dhuhr) // ‡¶ú‡ßÅ‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶Ø‡ßã‡¶π‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶æ‡¶∞‡ßá
    };
}

// UI ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function updatePrayerTimeUI(prayerTimes, location, methodName) {
    const nextPrayerInfo = getNextPrayerAndCountdown(prayerTimes);
    
    const prayTimeDiv = document.querySelector('.prayTime');
    if (!prayTimeDiv) {
        console.error('PrayTime div not found in DOM');
        return;
    }
    
    prayTimeDiv.innerHTML = `
        <div style="background: rgb(147 147 147 / 10%); backdrop-filter: blur(10px); border-radius: 15px; padding: 20px; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2); color: white; text-align: center; max-width: 600px; margin: 0 auto;">
            <h2 style="margin-top: 0; margin-bottom: 15px; font-weight: 600; text-shadow: 1px 1px 3px rgba(0,0,0,0.3); color: var(--text);">‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ</h2>
            <p style="margin-bottom: 5px; opacity: 0.9; color: var(--text);">‡¶∏‡ßç‡¶•‡¶æ‡¶®: ${location || '‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...'}</p>
            <p style="margin-bottom: 15px; opacity: 0.9; color: var(--text);">‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø: ${methodName || '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶∏‡ßã‡¶∏‡¶æ‡¶á‡¶ü‡¶ø'} | ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${prayerTimes.date}</p>
            
            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px; margin-bottom: 20px;">
                <!-- ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶∏‡ßá‡¶ï‡¶∂‡¶® -->
                <div class="smallDivs" style="background: var(--card); padding: 15px; border-radius: 10px; grid-column: span 1;">
                    <div style="font-weight: 600; margin-bottom: 8px; color: var(--text);">${nextPrayerInfo.currentPrayer ? '‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú' : '‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú'}</div>
                    <div style="font-size: 1.2em; font-weight: 700; margin-bottom: 5px; color: var(--text);">
                        ${nextPrayerInfo.currentPrayer || nextPrayerInfo.nextPrayer}
                    </div>
                    ${nextPrayerInfo.currentPrayer ? 
                        `<div style="font-size: 1.1em; color: var(--text);">‡¶∏‡¶Æ‡¶Ø‡¶º: ${formatTime(nextPrayerInfo.currentPrayerTime)}</div>` : 
                        `<div style="font-size: 1.1em; color: var(--text);">${nextPrayerInfo.nextPrayerTime}, ‡¶¨‡¶æ‡¶ï‡¶ø: ${nextPrayerInfo.countdown}</div>`
                    }
                </div>
                
                <!-- ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶∏‡ßá‡¶ï‡¶∂‡¶® -->
                <div style="background: var(--card); padding: 15px; border-radius: 10px; grid-column: span 1;">
                    <div style="font-weight: 600; margin-bottom: 8px; color: var(--text);">‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú</div>
                    <div style="font-size: 1.2em; font-weight: 700; margin-bottom: 5px; color: var(--text);">
                        ${nextPrayerInfo.nextPrayer}
                    </div>
                    <div style="font-size: 1.1em; color: var(--text);">‡¶∏‡¶Æ‡¶Ø‡¶º: ${nextPrayerInfo.nextPrayerTime}</div>
                    <div style="font-size: 1.1em; color: var(--text);">‡¶¨‡¶æ‡¶ï‡¶ø: ${nextPrayerInfo.countdown}</div>
                </div>
                
                <!-- ‡¶ú‡ßÅ‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶∏‡ßá‡¶ï‡¶∂‡¶® -->
                ${nextPrayerInfo.isJummah ? `
                    <div style="background: linear-gradient(135deg, #4CAF50, #45a049); padding: 15px; border-radius: 10px; grid-column: span 2;">
                        <div style="font-weight: 600; margin-bottom: 8px;">‡¶Ü‡¶ú ‡¶ú‡ßÅ‡¶Æ‡ßç‡¶Æ‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®</div>
                        <div style="font-size: 1.2em; font-weight: 700; margin-bottom: 5px;">‡¶ú‡ßÅ‡¶Æ‡ßç‡¶Æ‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú</div>
                        <div style="font-size: 1.1em;">‡¶∏‡¶Æ‡¶Ø‡¶º: ${nextPrayerInfo.jummahTime}</div>
                        <div style="font-size: 1.1em;">‡¶∏‡ßç‡¶•‡¶æ‡¶®: ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶Æ‡¶∏‡¶ú‡¶ø‡¶¶</div>
                    </div>
                ` : `
                    <div class="jumaDiv" style="padding: 15px; border-radius: 10px; grid-column: span 2;">
                        <div style="font-weight: 600; margin-bottom: 8px;">‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ú‡ßÅ‡¶Æ‡ßç‡¶Æ‡¶æ</div>
                        <div style="font-size: 1.2em; font-weight: 700; margin-bottom: 5px;">${nextPrayerInfo.jummahDate}</div>
                        <div style="font-size: 1.1em;">‡¶∏‡¶Æ‡¶Ø‡¶º: ${nextPrayerInfo.jummahTime}</div>
                        <div style="font-size: 1.1em;">‡¶¨‡¶æ‡¶ï‡¶ø: ${(nextPrayerInfo.isJummah ? 0 : (5 - new Date().getDay() + 7) % 7)} ‡¶¶‡¶ø‡¶®</div>
                    </div>
                `}

                <!-- ‡¶®‡¶ø‡ßü‡¶Æ‡¶ø‡¶§ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü‡¶∏‡ßÇ‡¶ö‡ßÄ -->
                <div style="background: var(--card); padding: 12px; border-radius: 10px;">
                    <div style="font-weight: 600; margin-bottom: 5px; color: var(--text);">‡¶´‡¶ú‡¶∞</div>
                    <div style="color: var(--text);">${formatTime(prayerTimes.fajr)}</div>
                </div>
                <div style="background: var(--card); padding: 12px; border-radius: 10px;">
                    <div style="font-weight: 600; margin-bottom: 5px; color: var(--text);">‡¶Ø‡ßã‡¶π‡¶∞${nextPrayerInfo.isJummah ? ' (‡¶ú‡ßÅ‡¶Æ‡¶Ü)' : ''}</div>
                    <div style="color: var(--text);">${formatTime(prayerTimes.dhuhr)}</div>
                </div>
                <div style="background: var(--card); padding: 12px; border-radius: 10px;">
                    <div style="font-weight: 600; margin-bottom: 5px; color: var(--text);">‡¶Ü‡¶∏‡¶∞</div>
                    <div style="color: var(--text);">${formatTime(prayerTimes.asr)}</div>
                </div>
                <div style="background: var(--card); padding: 12px; border-radius: 10px;">
                    <div style="font-weight: 600; margin-bottom: 5px; color: var(--text);">‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨</div>
                    <div style="color: var(--text);">${formatTime(prayerTimes.maghrib)}</div>
                </div>
                <div style="background: var(--card); padding: 12px; border-radius: 10px; grid-column: span 2;">
                    <div style="font-weight: 600; margin-bottom: 5px; color: var(--text);">‡¶á‡¶∂‡¶æ</div>
                    <div style="color: var(--text);">${formatTime(prayerTimes.isha)}</div>
                </div>
            </div>
            
            <div style="margin-top: 15px;">
                <button id="locationToggle" style="background: var(--card); border: none; padding: 8px 15px; border-radius: 5px; color: var(--text); cursor: pointer;">
                    ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®
                </button>
            </div>
            
            <div id="locationSelector" style="display: none; margin-top: 15px; background: var(--card); padding: 15px; border-radius: 10px;">
                <h3 style="margin-top: 0; color: var(--text);">‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®</h3>
                <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                    <button id="autoDetectBtn" style="flex: 1; background: #4CAF50; border: none; padding: 8px; border-radius: 5px; color: white; cursor: pointer;">
                        ‡¶Ö‡¶ü‡ßã ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡ßç‡¶ü
                    </button>
                    <button id="manualSelectBtn" style="flex: 1; background: #2196F3; border: none; padding: 8px; border-radius: 5px; color: white; cursor: pointer;">
                        ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü
                    </button>
                </div>
                
                <div id="manualInput" style="display: none;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 10px;">
                        <input type="text" id="cityInput" placeholder="‡¶∂‡¶π‡¶∞‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ" style="padding: 8px; border-radius: 5px; border: 1px solid #ccc;">
                        <input type="text" id="countryInput" placeholder="‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ" style="padding: 8px; border-radius: 5px; border: 1px solid #ccc;">
                    </div>
                    <button id="searchLocationBtn" style="background: #FF9800; border: none; padding: 8px 15px; border-radius: 5px; color: white; cursor: pointer; width: 100%;">
                        ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®
                    </button>
                </div>
                
                <div id="methodSelector" style="margin-top: 10px;">
                    <label for="calculationMethod" style="color: var(--text); display: block; margin-bottom: 5px;">‡¶ó‡¶£‡¶®‡¶æ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø:</label>
                    <select id="calculationMethod" style="width: 100%; padding: 8px; border-radius: 5px; border: 1px solid #ccc;">
                        <option value="2">‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶∏‡ßã‡¶∏‡¶æ‡¶á‡¶ü‡¶ø ‡¶Ö‡¶¨ ‡¶®‡¶∞‡ßç‡¶• ‡¶Ü‡¶Æ‡ßá‡¶∞‡¶ø‡¶ï‡¶æ (ISNA)</option>
                        <option value="1">‡¶Æ‡ßÅ‡¶∏‡¶≤‡¶ø‡¶Æ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶≤‡ßç‡¶° ‡¶≤‡ßÄ‡¶ó (MWL)</option>
                        <option value="3">‡¶Æ‡¶ø‡¶∂‡¶∞‡ßÄ‡¶Ø‡¶º ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶≤ ‡¶Ö‡¶•‡¶∞‡¶ø‡¶ü‡¶ø ‡¶Ö‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡ßá</option>
                        <option value="4">‡¶â‡¶Æ‡ßç‡¶Æ ‡¶Ü‡¶≤-‡¶ï‡ßÅ‡¶∞‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡¶Ø‡¶º, ‡¶Æ‡¶ï‡ßç‡¶ï‡¶æ</option>
                        <option value="5">‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶§</option>
                        <option value="7">‡¶ï‡¶æ‡¶§‡¶æ‡¶∞</option>
                        <option value="8">‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡¶æ‡¶™‡ßÅ‡¶∞</option>
                        <option value="9">‡¶á‡¶∞‡¶æ‡¶®</option>
                    </select>
                </div>
            </div>
        </div>
    `;
    
    // ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶∏‡ßá‡¶®‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
    const toggleBtn = document.getElementById('locationToggle');
    if (toggleBtn) {
        toggleBtn.addEventListener('click', function() {
            const selector = document.getElementById('locationSelector');
            if (selector) {
                selector.style.display = selector.style.display === 'none' ? 'block' : 'none';
            }
        });
    }
    
    const autoDetectBtn = document.getElementById('autoDetectBtn');
    if (autoDetectBtn) {
        autoDetectBtn.addEventListener('click', function() {
            localStorage.removeItem('selectedLocation');
            localStorage.removeItem('selectedMethod');
            initializePrayerTimeWidget();
        });
    }
    
    const manualSelectBtn = document.getElementById('manualSelectBtn');
    if (manualSelectBtn) {
        manualSelectBtn.addEventListener('click', function() {
            const manualInput = document.getElementById('manualInput');
            if (manualInput) {
                manualInput.style.display = 'block';
            }
        });
    }
    
    const searchBtn = document.getElementById('searchLocationBtn');
    if (searchBtn) {
        searchBtn.addEventListener('click', async function() {
            const cityInput = document.getElementById('cityInput');
            const countryInput = document.getElementById('countryInput');
            
            if (cityInput && countryInput) {
                const city = cityInput.value;
                const country = countryInput.value;
                
                if (city && country) {
                    try {
                        // OpenCage API ‡¶è‡¶∞ ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá Nominatim (OpenStreetMap) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
                        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(city + ', ' + country)}&accept-language=bn`);
                        const data = await response.json();
                        
                        if (data.length > 0) {
                            const lat = parseFloat(data[0].lat);
                            const lng = parseFloat(data[0].lon);
                            const locationName = data[0].display_name;
                            
                            // ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ
                            localStorage.setItem('selectedLocation', JSON.stringify({
                                latitude: lat,
                                longitude: lng,
                                name: locationName
                            }));
                            
                            // ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶ø‡¶§ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø
                            const methodSelect = document.getElementById('calculationMethod');
                            const method = methodSelect ? methodSelect.value : '2';
                            localStorage.setItem('selectedMethod', method);
                            
                            initializePrayerTimeWidget();
                        } else {
                            alert('‡¶∏‡ßç‡¶•‡¶æ‡¶®‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§');
                        }
                    } catch (error) {
                        console.error('Error fetching location:', error);
                        alert('‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ËøáÁ®ã‰∏≠ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§');
                    }
                } else {
                    alert('‡¶∂‡¶π‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®‡•§');
                }
            }
        });
    }
}

// ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
function getUserLocation() {
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject('Geolocation is not supported by your browser');
        } else {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    resolve({
                        latitude: position.coords.latitude,
                        longitude: position.coords.longitude
                    });
                },
                (error) => {
                    // Default to Dhaka, Bangladesh if location access is denied
                    console.error('Error getting location, using default (Dhaka)');
                    resolve({ latitude: 23.8103, longitude: 90.4125 });
                },
                { timeout: 10000 } // 10 seconds timeout
            );
        }
    });
}

// ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (Reverse Geocoding)
async function getLocationName(latitude, longitude) {
    try {
        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&accept-language=bn`);
        const data = await response.json();
        return data.display_name || '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®';
    } catch (error) {
        console.error('Error getting location name:', error);
        return '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®';
    }
}

// ‡¶ó‡¶£‡¶®‡¶æ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ
function getMethodName(methodCode) {
    const methods = {
        '1': '‡¶Æ‡ßÅ‡¶∏‡¶≤‡¶ø‡¶Æ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶≤‡ßç‡¶° ‡¶≤‡ßÄ‡¶ó',
        '2': '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶∏‡ßã‡¶∏‡¶æ‡¶á‡¶ü‡¶ø ‡¶Ö‡¶¨ ‡¶®‡¶∞‡ßç‡¶• ‡¶Ü‡¶Æ‡ßá‡¶∞‡¶ø‡¶ï‡¶æ',
        '3': '‡¶Æ‡¶ø‡¶∂‡¶∞‡ßÄ‡¶Ø‡¶º ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶≤ ‡¶Ö‡¶•‡¶∞‡¶ø‡¶ü‡¶ø',
        '4': '‡¶â‡¶Æ‡ßç‡¶Æ ‡¶Ü‡¶≤-‡¶ï‡ßÅ‡¶∞‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡¶Ø‡¶º',
        '5': '‡¶ï‡ßÅ‡¶Ø‡¶º‡ßá‡¶§',
        '7': '‡¶ï‡¶æ‡¶§‡¶æ‡¶∞',
        '8': '‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡¶æ‡¶™‡ßÅ‡¶∞',
        '9': '‡¶á‡¶∞‡¶æ‡¶®'
    };
    return methods[methodCode] || '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶∏‡ßã‡¶∏‡¶æ‡¶á‡¶ü‡¶ø ‡¶Ö‡¶¨ ‡¶®‡¶∞‡ßç‡¶• ‡¶Ü‡¶Æ‡ßá‡¶∞‡¶ø‡¶ï‡¶æ';
}

// ‡¶Æ‡ßÇ‡¶≤ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function initializePrayerTimeWidget() {
    try {
        let latitude, longitude, locationName, method;
        
        // ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
        const savedLocation = localStorage.getItem('selectedLocation');
        const savedMethod = localStorage.getItem('selectedMethod');
        
        if (savedLocation) {
            // ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
            try {
                const locationData = JSON.parse(savedLocation);
                latitude = locationData.latitude;
                longitude = locationData.longitude;
                locationName = locationData.name;
                method = savedMethod || '2';
            } catch (e) {
                console.error('Error parsing saved location:', e);
                localStorage.removeItem('selectedLocation');
                const coords = await getUserLocation();
                latitude = coords.latitude;
                longitude = coords.longitude;
                locationName = await getLocationName(latitude, longitude);
                method = '2';
            }
        } else {
            // ‡¶Ö‡¶ü‡ßã ‡¶°‡¶ø‡¶ü‡ßá‡¶ï‡ßç‡¶ü
            const coords = await getUserLocation();
            latitude = coords.latitude;
            longitude = coords.longitude;
            locationName = await getLocationName(latitude, longitude);
            method = '2';
        }
        
        // ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ
        const prayerTimes = await getPrayerTimes(latitude, longitude, method);
        
        if (prayerTimes) {
            // UI ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
            updatePrayerTimeUI(prayerTimes, locationName, getMethodName(method));
            
            // ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶°‡¶æ‡¶â‡¶® ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
            setInterval(async () => {
                const updatedPrayerTimes = await getPrayerTimes(latitude, longitude, method);
                if (updatedPrayerTimes) {
                    updatePrayerTimeUI(updatedPrayerTimes, locationName, getMethodName(method));
                }
            }, 60000);
        } else {
            const prayTimeDiv = document.querySelector('.prayTime');
            if (prayTimeDiv) {
                prayTimeDiv.innerHTML = `
                    <div style="text-align: center; padding: 20px; color: #d32f2f; background: #2b2a2aff; border-radius: 10px;">
                        ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                    </div>
                `;
            }
        }
    } catch (error) {
        console.error('Error initializing prayer time widget:', error);
        const prayTimeDiv = document.querySelector('.prayTime');
        if (prayTimeDiv) {
            prayTimeDiv.innerHTML = `
                <div style="text-align: center; padding: 20px; color: #d32f2f; background: #363434ff; border-radius: 10px;">
                    ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
                </div>
            `;
        }
    }
}

// ‡¶™‡ßá‡¶ú ‡¶≤‡ßã‡¶° ‡¶π‡¶≤‡ßá ‡¶â‡¶á‡¶ú‡ßá‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePrayerTimeWidget);
} else {
    initializePrayerTimeWidget();
}



//Quran ###############################################################################################################

(async function(){
  const container = document.querySelector(".quranApp");
  if(!container) return;

  // API BASE
  const BASE = "https://api.alquran.cloud/v1";
  const AR_EDITION = "quran-uthmani";
  const BN_EDITION = "bn.bengali";

  // ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
  const reciters = [
    {code:"ar.alafasy", name:"Mishary Rashid Alafasy"},
    {code:"ar.abdulbasitmurattal", name:"Abdul Basit (Murattal)"},
    {code:"ar.abdulbasitmujawwad", name:"Abdul Basit (Mujawwad)"},
    {code:"ar.husary", name:"Mahmoud Khalil Al-Husary"},
    {code:"ar.hudhaify", name:"Ali Al-Hudhaify"},
    {code:"ar.mahermuaiqly", name:"Maher Al-Muaiqly"},
    {code:"ar.minshawimurattal", name:"Minshawi (Murattal)"},
    {code:"ar.minshawimujawwad", name:"Minshawi (Mujawwad)"}
  ];

  // Surah list ‡¶Ü‡¶®‡¶¨
  container.innerHTML = '<div class="loader">‡¶∏‡ßÇ‡¶∞‡¶æ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</div>';
  let surahs = [];
  try {
    const res = await fetch(`${BASE}/surah`);
    const data = await res.json();
    surahs = data.data || [];
  } catch(e) {
    container.innerHTML = `<div class="loader">‡¶∏‡ßÇ‡¶∞‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: ${e.message}</div>`;
    return;
  }

  // UI ‡¶§‡ßà‡¶∞‡¶ø
  container.innerHTML = `
    <h2>‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶®</h2>
    <div class="controls">
      <label class="TopTitt">‡¶∏‡ßÇ‡¶∞‡¶æ: 
        <select id="surahSelect"></select>
      </label>
      <label class="TopTitt">‡¶Ü‡¶Ø‡¶º‡¶æ‡¶§ (‡¶∂‡ßÅ‡¶∞‡ßÅ): 
        <select id="ayahFrom"></select>
      </label>
      <label class="TopTitt">‡¶Ü‡¶Ø‡¶º‡¶æ‡¶§ (‡¶∂‡ßá‡¶∑): 
        <select id="ayahTo"></select>
      </label>
      <label class="TopTitt">‡¶ï‡¶æ‡¶∞‡ßÄ: 
        <select id="reciterSelect"></select>
      </label>
      <button id="loadBtn">‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì</button>
    </div>
    <div id="output"></div>
  `;

  const surahSelect = container.querySelector("#surahSelect");
  const ayahFrom = container.querySelector("#ayahFrom");
  const ayahTo = container.querySelector("#ayahTo");
  const reciterSelect = container.querySelector("#reciterSelect");
  const output = container.querySelector("#output");
  const loadBtn = container.querySelector("#loadBtn");

  // Surah options ‡¶≠‡¶∞
  surahs.forEach(s=>{
    const opt = document.createElement("option");
    opt.value = s.number;
    opt.textContent = `${s.number}. ${s.englishName} (${s.name})`;
    surahSelect.appendChild(opt);
  });

  // Reciter options ‡¶≠‡¶∞
  reciters.forEach(r=>{
    const opt = document.createElement("option");
    opt.value = r.code;
    opt.textContent = r.name;
    reciterSelect.appendChild(opt);
  });
  reciterSelect.value = "ar.alafasy"; // default Mishary

  // ‡¶Ø‡¶ñ‡¶® ‡¶∏‡ßÇ‡¶∞‡¶æ ‡¶¨‡¶¶‡¶≤‡¶æ‡¶¨‡ßá ‡¶§‡¶ñ‡¶® ‡¶Ü‡¶Ø‡¶º‡¶æ‡¶§ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶¶‡¶≤‡¶æ‡¶¨‡ßá
  const populateAyahs = ()=>{
    ayahFrom.innerHTML="";
    ayahTo.innerHTML="";
    const surahNum = surahSelect.value;
    const surah = surahs.find(s=>s.number==surahNum);
    if(!surah) return;
    for(let i=1;i<=surah.numberOfAyahs;i++){
      let opt1 = document.createElement("option");
      opt1.value=i; opt1.textContent=i;
      ayahFrom.appendChild(opt1);

      let opt2 = document.createElement("option");
      opt2.value=i; opt2.textContent=i;
      ayahTo.appendChild(opt2);
    }
    ayahTo.value=surah.numberOfAyahs;
  };
  surahSelect.addEventListener("change", populateAyahs);
  populateAyahs();

  // ‡¶Ü‡¶Ø‡¶º‡¶æ‡¶§ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  loadBtn.addEventListener("click", async ()=>{
    const surahNum = surahSelect.value;
    const from = parseInt(ayahFrom.value);
    const to = parseInt(ayahTo.value);
    const reciter = reciterSelect.value;

    output.innerHTML = '<div class="loader">‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</div>';
    try {
      const [arRes, bnRes, audioRes] = await Promise.all([
        fetch(`${BASE}/surah/${surahNum}/${AR_EDITION}`).then(r=>r.json()),
        fetch(`${BASE}/surah/${surahNum}/${BN_EDITION}`).then(r=>r.json()),
        fetch(`${BASE}/surah/${surahNum}/${reciter}`).then(r=>r.json())
      ]);

      const arAyahs = arRes.data.ayahs;
      const bnAyahs = bnRes.data.ayahs;
      const audioAyahs = audioRes.data.ayahs;

      let html = "";
      for(let i=from-1;i<to;i++){
        const ar = arAyahs[i];
        const bn = bnAyahs[i];
        const au = audioAyahs[i];
        html += `
          <div class="verse">
            <div class="ar">${ar.text} <span style="font-size:12px;color:#888;">(${ar.numberInSurah})</span></div>
            <div class="bn">${bn?bn.text:"<em>‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶®‡ßá‡¶á</em>"}</div>
            <audio controls data-idx="${i}" src="${au.audio}"></audio>
          </div>
        `;
      }
      output.innerHTML = html;

      // ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶∏‡¶ø‡¶ï‡ßã‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶™‡ßç‡¶≤‡ßá
      const audios = output.querySelectorAll("audio");
      audios.forEach((audio, idx)=>{
        audio.addEventListener("ended", ()=>{
          const next = audios[idx+1];
          if(next){
            next.play();
            next.scrollIntoView({behavior:"smooth", block:"center"});
          }
        });
      });

    } catch(err) {
      output.innerHTML = `<div class="loader">‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: ${err.message}</div>`;
    }
  });
})();



//Hadis #################################################################################################



document.addEventListener('DOMContentLoaded', function() {
  const container = document.querySelector(".Hadis");
  if (!container) return;

  // UI ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
  container.innerHTML = `
    <h2>‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶≠‡¶ø‡¶â‡¶Ø‡¶º‡¶æ‡¶∞</h2>
    <div class="controls">
      <label>‡¶ï‡¶ø‡¶§‡¶æ‡¶¨:
        <select id="bookSelect">
          <option value="bukhari">‡¶∏‡¶π‡ßÄ‡¶π ‡¶¨‡ßÅ‡¶ñ‡¶æ‡¶∞‡ßÄ</option>
          <option value="muslim">‡¶∏‡¶π‡ßÄ‡¶π ‡¶Æ‡ßÅ‡¶∏‡¶≤‡¶ø‡¶Æ</option>
          <option value="tirmidhi">‡¶∏‡ßÅ‡¶®‡¶æ‡¶® ‡¶Ü‡¶§-‡¶§‡¶ø‡¶∞‡¶Æ‡¶ø‡¶ú‡ßÄ</option>
          <option value="abudawud">‡¶∏‡ßÅ‡¶®‡¶æ‡¶® ‡¶Ü‡¶¨‡ßÅ ‡¶¶‡¶æ‡¶â‡¶¶</option>
          <option value="nasai">‡¶∏‡ßÅ‡¶®‡¶æ‡¶® ‡¶Ü‡¶®-‡¶®‡¶æ‡¶∏‡¶æ‡¶à</option>
          <option value="ibnmajah">‡¶∏‡ßÅ‡¶®‡¶æ‡¶® ‡¶á‡¶¨‡¶®‡ßá ‡¶Æ‡¶æ‡¶ú‡¶æ‡¶π</option>
          <option value="riyadussalihin">‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶¶‡ßÅ‡¶∏ ‡¶∏‡¶æ‡¶≤‡¶ø‡¶π‡ßÄ‡¶®</option>
        </select>
      </label>
      <label>‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:
        <input type="number" id="hadithNumber" value="1" min="1" max="7000">
        <div class="arrow-buttons">
          <button id="decrementBtn" title="‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®"><i class="fa fa-arrow-left"></i></button>
          <button id="incrementBtn" title="‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶®"><i class="fa fa-arrow-right"></i></button>
        </div>
      </label>
      <button id="loadBtn">‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</button>
    </div>
    <div id="output" class="output"></div>
  `;

  // ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
  const style = document.createElement('style');
  style.textContent = `
    .Hadis {
      max-width: 850px;
      margin: 20px auto;
      font-family: 'Noto Sans Bengali', 'SolaimanLipi', sans-serif;
      line-height: 1.6;
      padding: 6px;
      background: var(--bg);
      border-radius: 10px;
      box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    }
    .Hadis h2 {
      font-size: 22px;
      margin-bottom: 15px;
      color: var(--text);
      text-align: center;
      padding-bottom: 10px;
      border-bottom: 2px solid #eee;
      background: var(--datebg);
    }
    .Hadis .controls {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
      align-items: center;
    }
    .Hadis .controls .fa {
      color: var(--text);
    }
    .Hadis label {
      font-size: 0.8rem;
      font-weight: bold;
      color: var(--text);
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .Hadis select, .Hadis input {
      padding: 8px 12px;
      border-radius: 6px;
      border: 1px solid #ccc;
      background: var(--card);
      font-family: inherit;
      color: var(--text);
    }
    .Hadis input[type="number"] {
      width: 100px;
    }
    .Hadis .arrow-buttons {
      display: flex;
      flex-direction: row;
      gap: 10px;
      margin-bottom: 12px;
    }
    .Hadis .arrow-buttons button {
      padding: 5px 10px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      background: var(--datebg);
      color: var(--text);
      font-size: 14px;
      line-height: 1;
      transition: background 0.3s;
    }
    .Hadis .arrow-buttons button:hover {
      background: var(--card);
    }
    .Hadis button#loadBtn {
      padding: 8px 16px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      background: #4caf50;
      color: var(--text);
      font-size: 15px;
      font-weight: bold;
      transition: background 0.3s;
    }
    .Hadis button#loadBtn:hover {
      background: #3d8b40;
    }
    .Hadis .output {
      margin-top: 20px;
    }
    .Hadis .hadith {
      margin: 15px 0;
      padding: 15px;
      border-radius: 8px;
      background: var(--bg);
      color: var(--text);
      border-left: 4px solid #4caf50;
    }
    .Hadis .hadith .ar {
      font-size: 20px;
      direction: rtl;
      text-align: right;
      margin-bottom: 10px;
      font-family: 'Scheherazade New', 'Lateef', serif;
      line-height: 1.8;
      color: var(--text);
    }
    .Hadis .hadith .transliteration {
      font-size: 16px;
      margin-bottom: 8px;
      color: var(--text);
      font-style: italic;
    }
    .Hadis .hadith .bn_transliteration {
      font-size: 16px;
      margin-bottom: 8px;
      color: var(--text);
      font-style: italic;
      background: var(--datebg);
      padding: 8px;
      border-radius: 4px;
    }
    .Hadis .hadith .bn_translation {
      font-size: 16px;
      margin-bottom: 8px;
      color: var(--text);
      line-height: 1.6;
      background: var(--datebg);
      padding: 8px;
      border-radius: 4px;
    }
    .Hadis .hadith .meta {
      font-size: 14px;
      color: #666;
      margin-top: 10px;
      padding-top: 10px;
      border-top: 1px dashed #ddd;
    }
    .Hadis .loader {
      padding: 20px;
      text-align: center;
      color: #666;
      font-size: 18px;
    }
    .Hadis .error {
      color: #d32f2f;
      padding: 15px;
      text-align: center;
      background: #ffebee;
      border-radius: 8px;
      margin: 10px 0;
    }
    @media (max-width: 600px) {
      .Hadis .controls {
        flex-direction: column;
        align-items: stretch;
      }
      .Hadis .arrow-buttons {
        flex-direction: row;
        justify-content: center;
      }
    }
  `;
  document.head.appendChild(style);

  const bookSelect = container.querySelector("#bookSelect");
  const hadithNumberInput = container.querySelector("#hadithNumber");
  const output = container.querySelector("#output");
  const loadBtn = container.querySelector("#loadBtn");
  const incrementBtn = container.querySelector("#incrementBtn");
  const decrementBtn = container.querySelector("#decrementBtn");

  // ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶≤‡ßã‡¶° ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  async function loadHadith() {
    const book = bookSelect.value;
    const hadithNumber = hadithNumberInput.value;
    
    output.innerHTML = '<div class="loader">‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</div>';
    
    // API ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç URL ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
    const apiConfigs = [
      {
        name: 'fawazahmed0/hadith-api',
        bookMapping: {
          'bukhari': 'bukhari',
          'muslim': 'muslim',
          'tirmidhi': 'tirmidhi',
          'abudawud': 'abudawud',
          'nasai': 'nasai',
          'ibnmajah': 'ibnmajah',
          'riyadussalihin': 'riyadussalihin'
        },
        getUrls: (book, number) => ({
          arabic: `https://cdn.jsdelivr.net/gh/fawazahmed0/hadith-api@1/editions/ara-${book}/${number}.json`,
          bengali: `https://cdn.jsdelivr.net/gh/fawazahmed0/hadith-api@1/editions/ben-${book}/${number}.json`
        }),
        parseData: (arabicData, bengaliData) => ({
          hadithArabic: arabicData.hadiths[0]?.text || '‡¶Ü‡¶∞‡¶¨‡¶ø ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º',
          hadithBengali: bengaliData.hadiths[0]?.text || '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º',
          transliteration: '‡¶â‡¶ö‡ßç‡¶ö‡¶æ‡¶∞‡¶£ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º'
        })
      },
      {
        name: 'alQuranBD/Bangla-Hadith-api',
        bookMapping: {
          'bukhari': 'bukhari',
          'muslim': 'muslim',
          'tirmidhi': 'tirmidi',
          'abudawud': 'abuDaud',
          'nasai': 'nasai',
          'ibnmajah': 'ibnMajah',
          'riyadussalihin': 'riyadusSalihin'
        },
        getUrls: (book, number) => ({
          combined: `https://alquranbd.com/api/hadith/${book}/${number}`
        }),
        parseData: (data) => {
          const hadith = data[0] || {};
          return {
            hadithArabic: hadith.hadithArabic || '‡¶Ü‡¶∞‡¶¨‡¶ø ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º',
            hadithBengali: hadith.hadithBengali || '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º',
            transliteration: hadith.hadithEnglish || '‡¶â‡¶ö‡ßç‡¶ö‡¶æ‡¶∞‡¶£ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º'
          };
        }
      },
      {
        name: 'RakibRahman/hadith-api',
        bookMapping: {
          'bukhari': 'bukhari',
          'muslim': 'muslim',
          'tirmidhi': 'tirmidhi',
          'abudawud': 'abudawud',
          'nasai': 'nasai',
          'ibnmajah': 'ibnmajah',
          'riyadussalihin': 'riyadussalihin'
        },
        getUrls: (book, number) => ({
          combined: `https://bn-hadith-api.herokuapp.com/hadiths/${book}/${number}`
        }),
        parseData: (data) => ({
          hadithArabic: data.hadithArabic || '‡¶Ü‡¶∞‡¶¨‡¶ø ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º',
          hadithBengali: data.hadith || '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º',
          transliteration: data.hadithEnglish || '‡¶â‡¶ö‡ßç‡¶ö‡¶æ‡¶∞‡¶£ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º'
        })
      }
    ];

    let hadithData = null;
    let source = '';

    // API-‡¶ó‡ßÅ‡¶≤‡ßã‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶≤‡ßÅ‡¶™ ‡¶ï‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
    for (const api of apiConfigs) {
      try {
        const mappedBook = api.bookMapping[book] || book;
        const urls = api.getUrls(mappedBook, hadithNumber);
        
        if (urls.combined) {
          // alQuranBD ‡¶è‡¶¨‡¶Ç RakibRahman-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø single fetch
          const response = await fetch(urls.combined);
          if (!response.ok) throw new Error(`${api.name} ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø`);
          const data = await response.json();
          if (data && (Array.isArray(data) ? data.length > 0 : data.hadith)) {
            hadithData = api.parseData(data);
            source = api.name;
            break;
          }
        } else {
          // fawazahmed0-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø dual fetch
          const [arabicResponse, bengaliResponse] = await Promise.all([
            fetch(urls.arabic),
            fetch(urls.bengali)
          ]);
          if (!arabicResponse.ok || !bengaliResponse.ok) throw new Error(`${api.name} ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø`);
          const [arabicData, bengaliData] = await Promise.all([
            arabicResponse.json(),
            bengaliResponse.json()
          ]);
          if (arabicData.hadiths && bengaliData.hadiths) {
            hadithData = api.parseData(arabicData, bengaliData);
            source = api.name;
            break;
          }
        }
      } catch (error) {
        console.warn(`${api.name} ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø:`, error);
        continue; // ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ API ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
      }
    }

    if (hadithData) {
      displayHadith(hadithData, book, hadithNumber, source);
    } else {
      output.innerHTML = '<div class="error">‡¶ï‡ßã‡¶®‡ßã API ‡¶•‡ßá‡¶ï‡ßá ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§</div>';
    }
  }

  // ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  function displayHadith(hadithData, book, hadithNumber, source) {
    if (!hadithData) {
      output.innerHTML = '<div class="error">‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá</div>';
      return;
    }
    
    const bookNames = {
      'bukhari': '‡¶∏‡¶π‡ßÄ‡¶π ‡¶¨‡ßÅ‡¶ñ‡¶æ‡¶∞‡ßÄ',
      'muslim': '‡¶∏‡¶π‡ßÄ‡¶π ‡¶Æ‡ßÅ‡¶∏‡¶≤‡¶ø‡¶Æ',
      'tirmidhi': '‡¶∏‡ßÅ‡¶®‡¶æ‡¶® ‡¶Ü‡¶§-‡¶§‡¶ø‡¶∞‡¶Æ‡¶ø‡¶ú‡ßÄ',
      'abudawud': '‡¶∏‡ßÅ‡¶®‡¶æ‡¶® ‡¶Ü‡¶¨‡ßÅ ‡¶¶‡¶æ‡¶â‡¶¶',
      'nasai': '‡¶∏‡ßÅ‡¶®‡¶æ‡¶® ‡¶Ü‡¶®-‡¶®‡¶æ‡¶∏‡¶æ‡¶à',
      'ibnmajah': '‡¶∏‡ßÅ‡¶®‡¶æ‡¶® ‡¶á‡¶¨‡¶®‡ßá ‡¶Æ‡¶æ‡¶ú‡¶æ‡¶π',
      'riyadussalihin': '‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶¶‡ßÅ‡¶∏ ‡¶∏‡¶æ‡¶≤‡¶ø‡¶π‡ßÄ‡¶®'
    };
    
    const bnTransliteration = hadithData.transliteration || '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶â‡¶ö‡ßç‡¶ö‡¶æ‡¶∞‡¶£ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º';
    const bnTranslation = hadithData.hadithBengali || '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶∞‡ßç‡¶• ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º';
    
    const html = `
      <div class="hadith">
        <div class="ar">${hadithData.hadithArabic || ''}</div>
        <div class="transliteration">${bnTransliteration}</div>
        <div class="bn_transliteration">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶â‡¶ö‡ßç‡¶ö‡¶æ‡¶∞‡¶£: ${bnTransliteration}</div>
        <div class="bn_translation">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶∞‡ßç‡¶•: ${bnTranslation}</div>
        <div class="meta">
          <strong>‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:</strong> ${hadithNumber} | 
          <strong>‡¶ï‡¶ø‡¶§‡¶æ‡¶¨:</strong> ${bookNames[book] || book} | 
          <strong>‡¶∏‡ßã‡¶∞‡ßç‡¶∏:</strong> ${source} (GitHub)
        </div>
      </div>
    `;
    
    output.innerHTML = html;
  }

  // ‡¶§‡ßÄ‡¶∞ ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  function updateHadithNumber(change) {
    let currentNumber = parseInt(hadithNumberInput.value) || 1;
    currentNumber = Math.max(1, currentNumber + change);
    hadithNumberInput.value = currentNumber;
    loadHadith();
  }

  // ‡¶á‡¶≠‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡¶ø‡¶∏‡ßá‡¶®‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
  loadBtn.addEventListener('click', loadHadith);
  incrementBtn.addEventListener('click', () => updateHadithNumber(1));
  decrementBtn.addEventListener('click', () => updateHadithNumber(-1));

  // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡¶¨‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú ‡¶≤‡ßã‡¶° ‡¶π‡¶≤‡ßá ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
  setTimeout(loadHadith, 500);
});